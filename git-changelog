#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2012-2013 Martin Ueding <dev@martin-ueding.de>

###############################################################################
#                                   License                                   #
###############################################################################
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>.

"""
Script for the ``gitchangelog`` library. Accepts the command line options, lets
the library generate the changelog and displays the output in a pager.
"""

import argparse
import subprocess

from gitchangelog import *

__docformat__ = "restructuredtext en"

def parse_args():
    """
    Parses command line arguments into global ``options`` variable.
    """
    parser = argparse.ArgumentParser(description="Generate changelog from annotated tags.")
    parser.add_argument('-a', '--all', dest="list_all", default=False, action='store_true', help="Show tags from all branches (default: %(default)s")
    parser.add_argument('--filter', dest="regex", default=None, help="Regex to filter tags (default: %(default)s")
    return parser.parse_args()


def main():
    """
    Parse arguments, check for git dir and generate changelog.
    """
    options = parse_args()

    if not has_git_dir():
        print("Error: This is not a git repository.")
        sys.exit(1)

    try:
        pager = [subprocess.check_output(["git", "config", "--get", "core.pager"]).strip()]
    except subprocess.CalledProcessError:
        pager = "less -FRSX".split(' ')


    proc = subprocess.Popen(pager, stdin=subprocess.PIPE)
    generate_changelog(generate_tag_list(options), proc.stdin)
    proc.stdin.close()
    proc.communicate()


if __name__ == "__main__":
	main()
