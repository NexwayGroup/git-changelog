#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright (c) 2011 Martin Ueding <dev@martin-ueding.de>

import sys
import itertools
import subprocess

def main():
    # Get the tag description. Split the lines, remove the last empty line.
    all_tags = subprocess.check_output(["git", "tag"]).split('\n')[:-1]

    # The above list only gives us a list of all tags. We are interested in the correct order in the repo and only the tags that are on the current branch. `git log` gives that, but also branch names.
    log = subprocess.check_output(["git", "log", "--simplify-by-decoration", "--decorate", "--format=%d"]).split('\n')

    tags = []
    for log_entry in log:
        # There are a couple of empty lines there.
        if len(log_entry) == 0:
            continue

        log_entry_refs = log_entry[2:-1].split(', ')
        for ref in log_entry_refs:
            if ref in all_tags:
                tags.append(ref)

    # Iterate through the tags.
    for tag in tags:
        # Get the description for the tag.
        git_show = subprocess.check_output(["git", "show", tag]).split('\n')

        # If this is an annotated tag, it starts with "tag …", if it is a
        # lightweight tag, it starts with "commit …". Since lightweight tags do
        # not carry any description, we can discard them.
        if git_show[0][:3] != "tag":
            continue

        for line, i in zip(git_show, itertools.count()):
            # If the PGP signature starts, the entry is over.
            if line == "-----BEGIN PGP SIGNATURE-----":
                break

            # If the current line is empty, the next might be commit, Author
            # and Date. So this might be the last line.
            if len(line) == 0 and git_show[i+1][:6] == "commit" and git_show[i+2][:7] == "Author:" and git_show[i+3][:5] == "Date:":
                break


            # Print the line from the tag message.
            if i >= 4:
                print "    "+line

            # Print the tag name.
            elif i == 0:
                print line[4:]


if __name__ == "__main__":
	main()
